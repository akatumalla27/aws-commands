global
    log /dev/log local0 info
defaults
    log global
    option httplog
frontend http80
  bind *:80
  # Redirect all HTTP traffic to HTTPS
  redirect scheme https if !{ ssl_fc }
  bind 0.0.0.0:443 ssl crt /etc/haproxy/certs/catapult.evergreeninnovations.co.pem
  option forwardfor
  reqadd X-Forwarded-Proto:\ https  
  ## Uncomment for Let's Encrypt Cert renewal
  #acl letsencrypt_http_acl path_beg /.well-known/acme-challenge/
  mode http
  timeout client 60s
  ## Uncomment for Let's Encrypt Cert renewal
  #redirect scheme https if !letsencrypt_http_acl #{ env(FORCE_HTTPS_REDIRECT) -m str true }
  #use_backend letsencrypt_http if letsencrypt_http_acl
  acl network_allowed src 66.60.144.68 207.183.255.30 45.23.191.125
  acl subdom1 hdr(host) -m str dev.evergreeninnovations.co # for subdomain1
  http-request set-header X-Forwarded-Port 9045            # forward request to port 9045
  use_backend kibanaserver if subdom1                      # use backend config under kibanaserver
  http-request deny if subdom1 !network_allowed
  acl subdom2 hdr(host) -m str prometheus.evergreeninnovations.co # for subdomain2
  http-request set-header X-Forwarded-Port 9044            # forward request to port 9044
  use_backend prometheusserver if subdom2                     # use backend config under prometheusserver
  http-request deny if subdom2 !network_allowed
  acl ip hdr(host) -m str ec2-3-131-54-4.us-east-2.compute.amazonaws.com
  http-request deny deny_status 400 if ip
  default_backend tbservers

frontend letsencrypt
  bind *:80
  acl letsencrypt_http_acl path_beg /.well-known/acme-challenge/
  redirect scheme https if !letsencrypt_http_acl #{ env(FORCE_HTTPS_REDIRECT) -m str true }
  use_backend letsencrypt_http if letsencrypt_http_acl

backend letsencrypt_http
  mode http
  server letsencrypt_http_srv 127.0.0.1:54321

frontend http9045
  # Redirect all HTTP traffic to HTTPS
  redirect scheme https if !{ ssl_fc }
  bind *:"${KIBANAFRONT_PORT}" ssl crt /etc/haproxy/certs/dev.evergreeninnovations.co.pem
  mode http
  timeout client 60s
  default_backend kibanaserver

frontend logstashclient
  bind *:"${LOGSTASHFRONT_PORT}" ssl crt /home/ubuntu/certs-09-11/fullca.pem ca-file /home/ubuntu/certs/scert.pem verify required
  mode tcp
  timeout client 60s
  default_backend logstashserver

frontend mqttclient
  bind *:"${MQTTFRONT_PORT}" ssl crt /etc/haproxy/certs/dev.evergreeninnovations.co.pem ca-file /home/ubuntu/certs/scert.pem verify required
  #redirect scheme https if !{ ssl_fc }
  mode tcp
  timeout client 60s
  default_backend mqttserver

frontend http9044
  bind *:"${PROMETHEUSFRONT_PORT}"
  # Redirect all HTTP traffic to HTTPS
  redirect scheme https if !{ ssl_fc }
  bind *:9044 ssl crt /etc/haproxy/certs/dev.evergreeninnovations.co.pem
  mode http
  timeout client 60s
  default_backend prometheusserver

frontend http9043
  bind *:"${SUPERVISORFRONT_PORT}"
  # Redirect all HTTP traffic to HTTPS
  redirect scheme https if !{ ssl_fc }
  bind *:9043 ssl crt /etc/haproxy/certs/dev.evergreeninnovations.co.pem
  mode http
  timeout client 60s
  default_backend supervisorserver

backend tbservers
  timeout connect 10s
  timeout server 100s
  mode http
  server tbserver "${PRIVATE_SERVER}":"${TB_PORT}"

backend mqttserver
  timeout connect 10s
  timeout server 100s
  mode tcp
  server tbmqttserver1883 "${PRIVATE_SERVER}":"${MQTT_PORT}" check
  
backend kibanaserver
  timeout connect 10s
  timeout server 100s
  mode http
  server kibanaserver "${PRIVATE_SERVER}":"${KIBANA_PORT}"

backend logstashserver
  timeout connect 10s
  timeout server 100s
  mode tcp
  server logstashserver5044 "${PRIVATE_SERVER}":"${LOGSTASH_PORT}" check

backend prometheusserver
  timeout connect 10s
  timeout server 100s
  mode http
  server prometheusserver9090 "${PRIVATE_SERVER}":"${PROMETHEUS_PORT}" check

backend supervisorserver
  timeout connect 10s
  timeout server 100s
  mode http
  server supervisorserver15000 "${PRIVATE_SERVER}":"${SUPERVISOR_PORT}" check
